<h3 id="lesson_title"> Intro </h3>
<!--
If someone came to me as a blank slate -
what would I first want them to know about programming itself -
and about the process of learning programming -
before starting with any specfics of Python or something else?

- therefore -
take what youve written as a first version that ok enough for ppl.
but it will probable need to be re-written etc eventually --
it could be better. But I thing the hurdle to  valuable has been taken -
but not the hurdle to being as good as it can be ...
which is also something that shouldnt be expected ...
-->

<p>
This course is designed for any mondern computer user, who
wants to acquire a useful understanding of what maybe called the "basics of programming".
<br> <br>
To achieve that purpose we are going to look at the Python programming language. The choice of Python as our programming language has two good reasons. Firstly, Python is, put plainly, a nice language to write programs in - in my opinion that is. And secondly, Python is used in many, many different fields - data science, machine learning, game development, network programming - you name it. This is important, because chances are that you don't yet have a very clear understanding of what you eventually want to work on - what you want to use your programming skills for. And given that circumstance, it seems wise to choose a language that has a wide range of applicability - a regard in which I know of no language better than Python.

<br> <br>
One important thing to understand is that programming is a practical pursuit and not a theoretical subject.
Conceptually being a programmer is closer to being a blacksmith, a painter or an architect than it is to being a theoretical physicist or pure mathematician. As a programmer, you are fundamentally a maker and a designer - a maker and a designer of programs.
<br> <br>
This is not to say that theory doesn't matter. Acquiring a solid understanding is very important. 
In particular acquiring a solid understanding of your programming language of choice, since that language will be your main tool for writing programs. And in particular of the core concepts of that language, since many things will be based on those core concepts of which there are luckily usually not too many.
<br> <br>
However the understanding you're aiming at is a practical one. It is not an end in itself. In the same way that professional chefs may know a wide variety of ingredients and taste-patterns in order to cook good dishes, in that way programmers aim to know their language well in order to write good programs.
<br> <br>
That is why we are going to focus on theory as well as application.
I'm going to explain as clearly as I know how to the central concepts of the Python programming language and how they relate to the practice of writing programs. But unlike many other courses, we are going to try to start work on an
actual project that you actually want to build relatively quickly. It will probably be a small project, but it will be a genuine one. And that is what programming is centrally about - writing novel, useful programs.
<br> <br>
<!-- Practicalities - would to expect in detail -->
<!-- May change ... -->
The next lesson will be concerned with some context and with our setup for writing programs (it's a good, non-tedious one). After that each lesson will be dedicated to one of Python's core concepts. There are 12 of them. These 12 concepts do not constitute all concepts in Python, but they do represent the core of what you need to know in order to be able to do things. The minimum to be dangerous, so to speak. 
In fact learning that "minimum to be dangerous" is the name of our game for now.
All concepts beyond these central ones you can pick up naturally over time as you come to actually need them.
<br> <br>
I've also added two or three training exercise at the end of each lesson.
Their purpose is to give you an opportunity for easy practice.
In the real programming world there's no use for such uninteresting programs that don't actually do anything useful.
But for now we have to pay our dues and learn the basics.
<br> <br>
I would recommend that you do not expect to perfectly understand everything on
your first go through the course. In programming things can take a while to sink in. Often not because they are
necessarily very hard in themselves, but plainly because they look so unfamiliar on the first encounter (and second encounter). So, I believe a better plan would be to go through the course, including the exercises, once in a relatively quick manner to get a sort of rough and general overview. And then to do a second and maybe even a third "round" to let the ideas solidify.
<br> <br>
Let's dive into it.


<!-- 
Add in an iteration --

In case you feel conflicted about which programming language to learn first
and aren't confident in the choice of Python. I've written down the
points of consideration here. Otherwise next.

Practical Note - Which programming languges should I learn?
<br> <br>
Sometimes people get hung up on this question.
I've already said in paragraph 2 why I find Python to be a good choice. On another level
there's another answer to the question which is - The most important thing is to firstly
learn 1 language well and not to move to another before having a genuine grasp of the first.
One choose, learn if well. Don't do another one before you're baseline compentetn in one.
Why? Because programming languages share many concepts. Which means once you know 1 well,
the next one will be much much easier to learn. If you don't get good at one first, you won't
have this advantage. Also - knowing one well is motivating because you will start to be able to do things.
Which is the entire point.
-->

</p>
